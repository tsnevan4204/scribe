#!/usr/bin/env python3
"""
GCS Cleanup Script for Scribe Voice Recorder
Cleans up empty folders and moves files to proper structure
"""

from google.cloud import storage
from dotenv import load_dotenv
import os

load_dotenv()

def cleanup_gcs_bucket():
    """Clean up GCS bucket structure"""
    
    # Initialize client
    gcs_bucket = os.getenv("GCS_BUCKET_NAME")
    if not gcs_bucket:
        print("❌ GCS_BUCKET_NAME not set")
        return
    
    client = storage.Client()
    bucket = client.bucket(gcs_bucket)
    
    print(f"🔍 Analyzing bucket: {gcs_bucket}")
    
    # List all blobs
    blobs = list(bucket.list_blobs())
    
    # Group by folder structure
    folders = {}
    orphaned_files = []
    empty_folders = set()
    
    for blob in blobs:
        parts = blob.name.split('/')
        
        if len(parts) == 1:
            # File in root
            orphaned_files.append(blob)
        elif len(parts) >= 2:
            folder = parts[0]
            if folder not in folders:
                folders[folder] = []
            folders[folder].append(blob)
    
    print(f"\n📊 Analysis Results:")
    print(f"   - Found {len(folders)} folders")
    print(f"   - Found {len(orphaned_files)} orphaned files")
    
    # Check each folder
    for folder_name, folder_blobs in folders.items():
        print(f"\n📁 Folder: {folder_name}")
        print(f"   - Contains {len(folder_blobs)} files")
        
        wav_files = [b for b in folder_blobs if b.name.endswith('.wav')]
        txt_files = [b for b in folder_blobs if b.name.endswith('.txt')]
        
        print(f"   - WAV files: {len(wav_files)}")
        print(f"   - TXT files: {len(txt_files)}")
        
        # Check for empty folders (old residual pattern)
        if len(folder_blobs) == 0:
            empty_folders.add(folder_name)
            print(f"   ❌ EMPTY FOLDER (will be noted)")
        
        # Check for folders with no transcript
        elif len(wav_files) > 0 and len(txt_files) == 0:
            print(f"   ⚠️  MISSING TRANSCRIPT - has {len(wav_files)} WAV files but no transcript")
            
            # Create empty transcript as placeholder
            transcript_name = f"{folder_name}/transcript_{folder_name}.txt"
            placeholder_content = f"# Transcript for {folder_name}\n# Generated by cleanup script - original transcript was missing\n\n"
            
            try:
                blob = bucket.blob(transcript_name)
                blob.upload_from_string(placeholder_content, content_type='text/plain')
                print(f"   ✅ Created placeholder transcript: {transcript_name}")
            except Exception as e:
                print(f"   ❌ Failed to create placeholder: {e}")
    
    # Handle orphaned files
    if orphaned_files:
        print(f"\n🔧 Orphaned Files:")
        for blob in orphaned_files:
            print(f"   - {blob.name}")
        
        # You can add logic here to move orphaned files if needed
    
    # Report empty folders (GCS doesn't actually have "empty folders" - they're just prefixes)
    if empty_folders:
        print(f"\n🗑️  Empty Folder Patterns Found:")
        for folder in empty_folders:
            print(f"   - {folder} (no actual cleanup needed - GCS will handle)")
    
    print(f"\n✅ Cleanup analysis complete!")

def list_bucket_structure():
    """List current bucket structure for verification"""
    
    gcs_bucket = os.getenv("GCS_BUCKET_NAME")
    if not gcs_bucket:
        print("❌ GCS_BUCKET_NAME not set")
        return
    
    client = storage.Client()
    bucket = client.bucket(gcs_bucket)
    
    print(f"\n📋 Current Bucket Structure ({gcs_bucket}):")
    print("=" * 50)
    
    blobs = list(bucket.list_blobs())
    current_folder = None
    
    for blob in sorted(blobs, key=lambda x: x.name):
        parts = blob.name.split('/')
        
        if len(parts) >= 2:
            folder = parts[0]
            if folder != current_folder:
                print(f"\n📁 {folder}/")
                current_folder = folder
            print(f"   └── {parts[-1]} ({blob.size:,} bytes)")
        else:
            if current_folder is not None:
                print(f"\n📄 Root files:")
                current_folder = None
            print(f"   {blob.name} ({blob.size:,} bytes)")

if __name__ == "__main__":
    print("🧹 GCS Cleanup Script for Scribe Voice Recorder")
    print("=" * 50)
    
    # First, show current structure
    list_bucket_structure()
    
    # Then analyze and cleanup
    cleanup_gcs_bucket()
    
    # Show final structure
    print("\n" + "=" * 50)
    print("📋 Final Structure:")
    list_bucket_structure()